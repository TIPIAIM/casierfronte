import React, { useState, useEffect } from "react";
import { Search, Loader2, User, FileText } from "lucide-react";
import styled from "styled-components";

// Palette de couleurs
const colors = {
  primary: "#002B5B",
  secondary: "#1A4D2E",
  accent: "#F2C94C",
  white: "#FFFFFF",
  darkBlue: "#003566",
  lightBg: "#F5F7FA",
  error: "#C53030",
  success: "#2E7D32",
  text: "#333333",
  lightGray: "#E5E7EB",
};

// Styles
const Container = styled.div`
  max-width: 800px;
  margin: 2rem auto;
  padding: 2rem;
  background: ${colors.white};
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
  font-family: "Segoe UI", Roboto, "Helvetica Neue", sans-serif;

  @media (max-width: 768px) {
    padding: 1rem;
    margin: 1rem;
  }
`;

const Header = styled.div`
  margin-bottom: 2rem;
  border-bottom: 2px solid ${colors.primary};
  padding-bottom: 1rem;

  h1 {
    color: ${colors.primary};
    font-size: 1.8rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
  }
`;

const SearchContainer = styled.div`
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
  flex-wrap: wrap;

  @media (max-width: 480px) {
    flex-direction: column;
  }
`;

const SearchInput = styled.div`
  flex: 1;
  position: relative;
  min-width: 250px;

  input {
    width: 100%;
    padding: 0.75rem 1rem 0.75rem 2.5rem;
    border: 1px solid ${colors.lightGray};
    border-radius: 6px;
    font-size: 0.95rem;
    transition: all 0.2s;

    &:focus {
      outline: none;
      border-color: ${colors.primary};
      box-shadow: 0 0 0 3px ${colors.primary}1A;
    }
  }

  svg {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    color: ${colors.text};
  }
`;

const SearchButton = styled.button`
  padding: 0 1.5rem;
  background: ${colors.primary};
  color: ${colors.white};
  border: none;
  border-radius: 6px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s;
  display: flex;
  align-items: center;
  gap: 0.5rem;

  &:hover {
    background: ${colors.darkBlue};
  }

  &:disabled {
    background: ${colors.lightGray};
    color: ${colors.text}80;
    cursor: not-allowed;
  }
`;

const FormContainer = styled.div`
  background: ${colors.lightBg};
  padding: 2rem;
  margin-top: 1rem;
`;

const FormRow = styled.div`
  display: flex;  
  align-items: center;

  @media (max-width: 480px) {
    flex-direction: column;
    align-items: flex-start;
  }
`;

const FormLabel = styled.div`
  font-weight: 600;
  color: ${colors.primary};
  min-width: 180px;
  margin-right: 1rem;

  @media (max-width: 480px) {
    margin-bottom: 0.25rem;
    margin-right: 0;
  }
`;

const FormValue = styled.div`
  flex: 1;
  padding: 0.5rem;
  color: ${colors.text};

  &.empty {
    color: ${colors.text}80;
    font-style: italic;
  }
`;

const LoadingContainer = styled.div`
  display: flex;
  justify-content: center;
  padding: 2rem;
`;

const EmptyState = styled.div`
  text-align: center;
  padding: 2rem;
  color: ${colors.darkBlue};
  font-size: 1.1rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;

  svg {
    color: ${colors.darkBlue}50;
  }
`;

function DemandesListPC() {
  const [demandes, setDemandes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [foundDemande, setFoundDemande] = useState(null);
  const [searchTriggered, setSearchTriggered] = useState(false);

  // Récupérer toutes les demandes depuis le backend
  useEffect(() => {
    const fetchAllDemandes = async () => {
      setLoading(true);
      try {
        const response = await fetch("http://localhost:2027/api/demande/");
        if (!response.ok) throw new Error("Erreur de chargement des demandes");
        const data = await response.json();
        setDemandes(data.data);
      } catch (error) {
        console.error("Erreur:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchAllDemandes();
  }, []);

  // Formater la date
  const formatDate = (dateString) => {
    if (!dateString) return "-";
    const options = { day: "2-digit", month: "2-digit", year: "numeric" };
    return new Date(dateString).toLocaleDateString("fr-FR", options);
  };

  // Lancer la recherche
  const handleSearch = () => {
    if (!searchTerm) {
      setFoundDemande(null);
      setSearchTriggered(false);
      return;
    }

    setSearchTriggered(true);
    const demande = demandes.find(
      (demande) =>
        demande.personalInfo.passport?.toLowerCase() ===
        searchTerm.toLowerCase()
    );
    setFoundDemande(demande || null);
  };

  return (
    <Container>
      <SearchContainer>
        <SearchInput>
          <Search size={18} />
          <input
            type="text"
            placeholder="Rechercher par numéro de passeport..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            onKeyPress={(e) => e.key === "Enter" && handleSearch()}
          />
        </SearchInput>
        <SearchButton onClick={handleSearch} disabled={!searchTerm}>
          <Search size={18} />
          Rechercher
        </SearchButton>
      </SearchContainer>

      {loading ? (
        <LoadingContainer>
          <Loader2 size={32} className="animate-spin" color={colors.primary} />
        </LoadingContainer>
      ) : searchTriggered && !foundDemande ? (
        <EmptyState>
          <User size={48} />
          <p>Aucune demande trouvée pour ce numéro de passeport</p>
        </EmptyState>
      ) : foundDemande ? (
        <FormContainer>
          <Header>
            <h1>BULLETIN N°3</h1>
            <h1>EXTRAIT DU CASIER JUDICIAIRE</h1>
            <p>(article 1216 du code de procédure penale)</p>
          </Header>

          <FormRow>
            <FormLabel>Prénom et Nom:</FormLabel>
            <FormValue
              className={
                !foundDemande.personalInfo?.lastName &&
                !foundDemande.personalInfo?.firstName
                  ? "empty"
                  : ""
              }
            >
              {foundDemande.personalInfo?.lastName || ""}{" "}
              {foundDemande.personalInfo?.firstName || "Non renseigné"}
            </FormValue>
          </FormRow>

          <FormRow>
            <FormLabel>Né le:</FormLabel>
            {formatDate(foundDemande.personalInfo?.birthDate)}
          </FormRow>

          <FormRow>
            <FormLabel>A:</FormLabel>
            <FormValue
              className={!foundDemande.personalInfo?.birthPlace ? "empty" : ""}
            >
              {foundDemande.personalInfo?.birthPlace || "Non renseigné"}
            </FormValue>
          </FormRow>
          <FormRow>
            <FormLabel>Père:</FormLabel>
            <FormValue
              className={!foundDemande.personalInfo?.firstName1 ? "empty" : ""}
            >
              {foundDemande.personalInfo?.firstName1 || "Non renseigné"}
            </FormValue>
          </FormRow>
          <FormRow>
            <FormLabel>Mère:</FormLabel>
            <FormValue
              className={!foundDemande.personalInfo?.firstName2 ? "empty" : ""}
            >
              {foundDemande.personalInfo?.firstName2 || "Non renseigné"}
            </FormValue>
          </FormRow>
       
          <FormRow>
            <FormLabel>Domicile:</FormLabel>
            <FormValue
              className={
                !foundDemande.personalInfo?.villecommune &&
                !foundDemande.personalInfo?.pays
                  ? "empty"
                  : ""
              }
            >
              {foundDemande.personalInfo?.villecommune || ""}{" "}
             / {foundDemande.personalInfo?.pays || "Non renseigné"}
            </FormValue>
          </FormRow>
        

          <FormRow>
            <FormLabel>Etat Civil de la Famille:</FormLabel>
            <FormValue
              className={!foundDemande.personalInfo?.situationFamiliale ? "empty" : ""}
            >
              {foundDemande.personalInfo?.situationFamiliale || "Non renseigné"}
            </FormValue>
          </FormRow>
          
          <FormRow>
            <FormLabel>Proffession:</FormLabel>
            <FormValue
              className={!foundDemande.personalInfo?.profession ? "empty" : ""}
            >
              {foundDemande.personalInfo?.profession || "Non renseigné"}
            </FormValue>
          </FormRow>


          <FormRow>
            <FormLabel>Nationalité:</FormLabel>
            <FormValue
              className={!foundDemande.personalInfo?.nationalite ? "empty" : ""}
            >
              {foundDemande.personalInfo?.nationalite || "Non renseigné"}
            </FormValue>
          </FormRow>

        </FormContainer>
      ) : (
        <EmptyState>
          <FileText size={48} />
          <p>Entrez un numéro de passeport et cliquez sur "Rechercher"</p>
        </EmptyState>
      )}
    </Container>
  );
}

export default DemandesListPC;
